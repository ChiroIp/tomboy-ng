<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>tomboy-ng Internals</title>
  <text xml:space="preserve"><note-content version="0.1"><underline>tomboy-ng Internals</underline>

This doc has some information about how tomboy-ng works internally. In some manner it also reveals what I have discovered about generic Tomboy but should not be seen as authorative. Sadly, not a lot of Tomboy's way of thinking has been officially documented.


See a seperate note about the Sync Process.<size:large>

<bold>Building Tomboy-ng</bold></size:large>

You can build tomboy-ng on Windows (tested on 10), Mac (tested on Sierra) and Linux (tested on Ubuntu Mate 16.04).

There are binary install kits for Linux, Windows and Mac.  If you want to build your own (or, please, help with development) that too is easy. Requires Free Pascal, Lazarus and the KControls component to build. I have been working with Lazarus 1.8, just released late 2017. Use the bitbucket version of KControls.

If you run tomboy-ng within the debugger, remember that there are several handled exceptions, the debugger insists on telling you about them so make sure you press "continue". Outside the debugger, you will not be aware of this happening.<size:large>

<bold>Internals</bold></size:large>

Lazarus and Free Pascal support heaps of other platforms too and I suspect the KControls Component might as well.

<bold>IFDEFs</bold>

There are not a lot of ifdef and generally I think its desirable to avoid if possible. GetLocalTime() in SaveNote has one because a Linux process can be fooled if its been running for a long time when we hit Daylight Saving Time. This call will make sure the process clock and system clock agree. Please see https://xkcd.com/1883/

We now display Cocoa based Mac a little differently that Linux/Windows, Mac users prefer a Main Menu rather than the TrayIcon one and Cocoa (but not Carbon) have difficulty displaying a try icon when the main window is hidden. A bit of extra Window code needed in EditBox because of Windows insistence on two character line endings.<size:large>

<bold>Release Test Plan</bold></size:large>

One each platform, Linux, Windows and Mac we do this set of test. In addition, obviously, test any new features and things 'around' where changes have been made. Tests are made with full debugging on including heaptrc. Not from within the IDE.

* Load up new binary, remove any rubbish short term notes, notebooks and do a sync. Exit.
* Remove config and all notes, eg rm -Rf ~/.config/tomboy-ng; rm -Rf ~/.local/share/tomboy-ng
* Start App and point Notes Dir to default place, save config.
* Make a new note. Exit note and then reload. Delete it. There is no local manifest
  at this stage so make sure thats the case.
* Create a new note. Paste something in from outside and copy something from the note elsewhere. Add a set of bullets and mix up some formatting. Exit and reload.
* Config sync, pull in a set of notes. Load a large note and insert a link to another note.
* Make a Notebook, add several notes to it. Sync.
* Remove that notebook, sync. Exit and reload.
* Make another notebook, add notes
* Delete the note you made earlier. Is it gone ? Is it in the Backup dir ?
* Do another sync, is deleted note listed as deleted from server ?
* One off extra - inspect local manifest and ensure syncrev is not blank.
* Quit - no memory leaks ?

<bold>Notebooks</bold>
Every note that is a member of a Notebook has an extra bit of XML down just after the &lt;y&gt;,&lt;/y&gt; tag. Tomboy mentions only one Notebook, to remain compatable, so should we but there is apparently no there reason. So, provide user with an option in Settings. Tags look like this -
<monospace>  &lt;tags&gt;</monospace>
<monospace>    &lt;tag&gt;system:notebook:DavosNotebook&lt;/tag&gt;</monospace>
<monospace>  &lt;/tags&gt;</monospace>
<monospace>In addition, Notebook Templates exist in Tomboy. They are are identified by this</monospace>
<monospace>  &lt;tags&gt;</monospace>
<monospace>    &lt;tag&gt;system:template&lt;/tag&gt;</monospace>
<monospace>    &lt;tag&gt;system:notebook:DavosNotebook&lt;/tag&gt;</monospace>
<monospace>  &lt;/tags&gt;</monospace>

The StartHere note has the system:template tag but not, obviously, the notebook one.

<highlight>POLICY (not sure if Tomboy does this too, don't assume)</highlight>
 If I find a note that thinks it is a member of a particular notebook, but I cannot  find a template for that note, then I will ignore that claim, not display that notebook  to user and remove the claim if and when I save the note.
 When a notebook is deleted, we delete the Notebook Template, not the notes that are  a member of the notebook. We make no change to the notes, thier tag remains until the note is rewritten.

So, the plan is -

Note_Lister - If a note has just the Notebook one, use it normally and add a entry,  ID:NotebookName to NotebookList object in Note_Lister.
<list><list-item dir="ltr">   A function to return a list (TStringList ?) full of all the Notebooks, optionall  for an ID is a member of.  ie function TNoteLister.GetNotebooks(const ID = '') : TStrings</list-item></list>
<list><list-item dir="ltr">   I'll assume any change to a Note's membership is all handled by one function that passes the ID of the note and a TStringList that contains all the notebooks that note is a member of. So, delete existing and add new ones. TStringList might be empty procedure SetNotesMembership(const ID : ansistring; const MemberList : TStringList);</list-item></list>

Code added to SaveNote that when a note is being saved, we look at Note_Lister's   NotebookList and see if note is a member of a Notebook, if so put in appropriate  code.
<list><list-item dir="ltr">Add Note_Lister to uses clause.</list-item></list>
<list><list-item dir="ltr">Add a function that returns the Tags block if it finds this note is  a member of any particular notebook. Tags specific code belongs here noti n Note_Lister.</list-item></list>
<list><list-item dir="ltr">Call that function from the Footer() procedure.</list-item></list>
Add some GUI to Editbox to allow user to make the current note join or leave   an existing Notebook or, if necessary, make a new notebook.
Add tools to NotebookList to list all known Notebooks and to remove an entry  when a note leaves a notebook.

* Editbox stuff *
GUI mode, add a popup menu to the notebook button, turn on checkbox options for it
First item will be make a new notebook, others are added at runtime based on data
in the NotebookList object.

* MainUnit stuff *
- Add strgrid to form for Notebook, "Notebooks" (not clickable);
       - "Show all notes" - now a seperate button.    Done
    - "Templates" - will be Right Click in Notebook Name in str list - ToDo
    - List of know Notebooks from Note_Lister. Click and see members - Done
- Interface between EditBox and Note_lister so we can add and remove Notebook-ness - ToDo
- The DeleteNote() function must check to see if note is listed as having notebook - Hmm, why ?<size:large>

Make a New Notebook Process</size:large>
User gets a dialog, Notebook, that can let them enter a new notebook name.
User presses OK button and if the dialogs New Notebook tab is active it does this -
* check that there is some text in text box
* creates a new saver object.
* calls Saver.SaveNewTemplate passing the name of the new Notebook.
* That generates a GUID to name the template, and calls AddNoteBook() to put
  a record of the notebook name and the ID of its Template into the notebook data
  structure.
* We then open a stream, save a simplified note with the name and read  Saver.NotebookTags
  to put correct tags in, it gets this info from the Notebook data strusture, we put it
  in there earlier.

If user deletes a notebook, we delete the notebook template file and remove ref
to it from the notebook structure. We do not, at this stage, make any changes to
individual notebooks that may claim to be members of that notebook. If user loads
such a note, the claims will be ignored and not resaved.

</note-content></text>
  <last-change-date>2020-06-25T13:07:02.5319812+10:00</last-change-date>
  <last-metadata-change-date>2020-06-25T13:07:02.5319812+10:00</last-metadata-change-date>
  <create-date>2018-06-23T13:03:04.5210000+10:00</create-date>
  <cursor-position>1</cursor-position>
  <selection-bound-position>1</selection-bound-position>
  <width>1000</width>
  <height>626</height>
  <x>20</x>
  <y>28</y>
  <open-on-startup>False</open-on-startup>
</note>