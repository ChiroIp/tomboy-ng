

This is a draft or proof of concept for rewriting Tomboy Notes in FreePascal
and lazarus.

The intention is to stick to Tomboy's basic principles of simple user interface,
cross platform and syncronisation between those platforms. Long term ....

So far, it has a basic Tomboy Editor functional but lacks some things -

* Spell Checking (hard)
* Monospaced Font (easy)
* Printing       (easy)
* Table of Contents (a plugin I use a LOT)
* Tools to manage (re-use or delete) deleted files that end up n Backup/.


On the other hand, it does read and write Tomboy's files .  Displays the small,
normal, large and huge fonts Bold, Italics and bullets. Highlight is, at present
replaced with red coloured text. It links to notes with matching names (and has a
a switch to stop that).

File syncs with Tomboy (and itself). Autosaves.

But the real feature is that it compiles cleanly under (gtk) Linux, Win10 and Mac.
From same source with only a couple of IFDEFs.  The resulting  binary is all you need.
No additional libraries.

I have tested it on Debian XFCE and Gnome 3, Ubuntu Mate, Win10  Mac Sierra

Notes about its internals -

There are binary install kits for Linux, Windows and Mac.
If you want to build your own (or, please, help with development) that too is easy.
Requires Free Pascal, Lazarus and the KControls component to build. I have been
working with Lazarus 1.8rc3 and 1.8, just released.
Use the bitbucket version of KControls.

Lazarus and Free Pascal support heaps of other platforms too and I suspect the
KControls Component might as well.

IFDEFs

There are not a lot of ifdef and generally I think its desirable to avoid if
possible. GetLocalTime() in SaveNote has one because a Linux process can be
fooled if its been running for a long time when we hit Daylight Saving Time.
This call will make sure the process clock and system clock agree.
Please see https://xkcd.com/1883/

One to force a workaround on the Mac relating to updating menu captions in the
TrayIcon, in MainUnit.  A bit of extra Window code needed in EditBox because of
Windows insistence on two character line endings.

And there is a memory leak in the Mac version so, to be safe, don't let it sit
running for a long length of time, we are working on this upstream problem.
This release will also compile under Mac OSX 64bit Cocoa but there are even more
memory leaks there and I do not recommend it for normal use.

If you run it within the debugger, remember that there are several handled
exceptions, the debugger insists on telling you about them so make sure you
press "continue". Outside the debugger, you will not be aware of this happening.

Over time, expect this file to contain quite a lot about tomboy-ng's internal workings

Release Test Plan
-----------------
One each platform, Linux, Windows and Mac we do this set of test. In addition,
obviously, test any new features and things 'around' where changes have been made.
Tests are made with full debugging on including heaptrc. Not from within the IDE.

* Load up new binary and do a sync. Exit.
* Remove config dir (eg) ~/.config/tomboy-ng and all notes ~/.local/share/tomboy-ng/*
* Start App and point Notes Dir to default place, save config.
* Make a new note. Exit note and then reload. Delete it. There is no local manifest
  at this stage so make sure thats the case.
* Create a new note. Add a set of bullets and mix up some formatting. Exit and reload.
* Config sync, pull in a set of notes. Load a large note and insert a link to another note.
* Delete the note you made earlier. Is it gone ? Is it in the Backup dir ?
* Do another sync, is deleted note listed as deleted from server ?
* Quit - no memory leaks ?

Application Icons
-----------------
There is a way to go but here is a start.
Under "my Ubuntu Mate" install, it seems the Lazarus Application Icon is ignored. Instead, I can get a nice Icon displayed on the plank and on the top status bar by putting an 256x256 icon in  /usr/share/icons/hicolor/256x256/apps/tomboy-ng

I'll also provide, in similar places 16x16, 22x22, 24x24, 48x48 because some docs I've read suggest they might be needed. Sigh ....

In the Mac - setting a Lazarus Application Icon seems work. I'll need to test under Windows .... 

Notebooks
------------
Every note that is a member of a Notebook has an extra bit of XML down just after the <y>,</y>
tag, in Tomboy it mentions only one Notebook, to remain compatable, so should we but there is
no there reason. Tags look like this -
  <tags>
    <tag>system:notebook:DavosNotebook</tag>
  </tags>
In addition, Notebook Templates exist in Tomboy but I don't plan to rely on them, just
ignore them if present. They are are identified by this
  <tags>
    <tag>system:template</tag>
    <tag>system:notebook:DavosNotebook</tag>
  </tags>
The StartHere note has the system:template tag but not, obviously, the notebook one.

POLICY (not sure is Tomboy does this too)
 * If I find a note that thinks it is a member of a particular notebook, but I cannot
   find a template for that note, then I will ignore that claim, not display that notebook
   to user and remove the claim if and when I save the note.
 * When a notebook is deleted, we delete the Notebook Template, not the notes that are
   a member of the note.

So, the plan is -
* Ignore any note that has both above tags. We'll deal with (editing) Templates seperatly.
* Note_Lister - If a note has just the Notebook one, use it normally and add a entry,
  ID:NotebookName to NotebookList object in Note_Lister.   Done
  - A function to return a list (TStringList ?) full of all the Notebooks, optionall
    for an ID is a member of.  ie function TNoteLister.GetNotebooks(const ID = '') : TStrings
  - I'll assume any change to a Note's membership is all handled by one function
	that passes the ID of the note and a TStringList that contains all the notebooks
	that note is a member of. So, delete existing and add new ones. TStringList might be empty
	procedure SetNotesMembership(const ID : ansistring; const MemberList : TStringList);

* Add code to SaveNote that when a note is being saved, we look at Note_Lister's
  NotebookList and see if note is a member of a Notebook, if so put in appropriate
  code.
	- Add Note_Lister to uses clasue.                 - done
	- Add a function that returns the Tags block if it finds this note is
	  a member of any particular notebook. Tags specific code belongs here not
	  in Note_Lister.                                 - done
	- Call that function from the Footer() procedure. - done
* Add some GUI to Editbox to allow user to make the current note join or leave
  an existing Notebook or, if necessary, make a new notebook.
* Add tools to NotebookList to list all known Notebooks and to remove an entry
  when a note leaves a notebook.

* Editbox stuff *
GUI mode, add a popup menu to the notebook button, turn on checkbox options for it
First item will be make a new notebook, others are added at runtime based on data
in the NotebookList object.

* MainUnit stuff *
- Add strgrid to form for Notebook, "Notebooks" (not clickable);
       - "Show all notes" - now a seperate button.    Done
	   - "Templates" - will be Right Click in Notebook Name in str list - ToDo
	   - List of know Notebooks from Note_Lister. Click and see members - Done
- Interface between EditBox and Note_lister so we can add and remove Notebook-ness - ToDo
- The DeleteNote() function must check to see if note is listed as having notebook - Hmm, why ?

Make a New Notebook Process
----------------------------
User gets a dialog, Notebook, that can let them enter a new notebook name.
User presses OK button and if the dialogs New Notebook tab is active it does this -
* check that there is some text in text box
* creates a new saver object.
* calls Saver.SaveNewTemplate passing the name of the new Notebook.
* That generates a GUID to name the template, and calls AddNoteBook() to put
  a record of the notebook name and the ID of its Template into the notebook data
  structure.
* We then open a stream, save a simplified note with the name and read  Saver.NotebookTags
  to put correct tags in, it gets this info from the Notebook data strusture, we put it
  in there earlier.

If user deletes a notebook, we delete the notebook template file and remove ref
to it from the notebook structure. We do not, at this stage, make any changes to
individual notebooks that may claim to be members of that notebook. If user loads
such a note, the claims will be ignored and not resaved.
